# -*- coding: utf-8 -*-
"""24 assignment ppt

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h0UI1ovslLBLuLY4FikNgp9Oec-h8htB
"""

#1solution

def romanToInt(s):

    roman_values = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }

    # Initialize the result variable
    result = 0


    for i in range(len(s) - 1):

        if roman_values[s[i]] < roman_values[s[i + 1]]:
            result -= roman_values[s[i]]
        else:
            result += roman_values[s[i]]


    result += roman_values[s[-1]]

    return result


print(romanToInt("III"))    # Output: 3
print(romanToInt("LVIII"))  # Output: 58

#2solution

def lengthOfLongestSubstring(s):
    # Initialize pointers for the sliding window and a set to store characters in the window
    left = 0
    right = 0
    char_set = set()
    max_length = 0

    # Iterate through the string with the right pointer
    while right < len(s):
        # If the current character is not in the set, add it to the set and move the right pointer
        if s[right] not in char_set:
            char_set.add(s[right])
            right += 1
            max_length = max(max_length, right - left)
        else:
            # If the current character is in the set, remove the leftmost character and move the left pointer
            char_set.remove(s[left])
            left += 1

    return max_length

# Test cases
print(lengthOfLongestSubstring("abcabcbb"))  # Output: 3
print(lengthOfLongestSubstring("bbbb"))      # Output: 1
print(lengthOfLongestSubstring("pwwkew"))    # Output: 3

#3solution

def majorityElement(nums):
    # Initialize variables to store the candidate and its count
    candidate = None
    count = 0


    for num in nums:
        if count == 0:

            candidate = num
            count = 1
        elif num == candidate:

            count += 1
        else:

            count -= 1

    return candidate


print(majorityElement([3, 2, 3]))
print(majorityElement([2, 2, 1, 1, 1, 2, 2]))

